#!/bin/bash

spacing=0.325

while getopts "p:v" opt; do
    case $opt in
        p)
            echo "pixel spacing will be: $OPTARG" >&2
            spacing=$OPTARG
            ;;
        v)
            echo "Verbose mode is enabled" >&2
            verbose=1
            ;;
        \?)
            echo "Invalid option -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            exit 1
            ;;
     esac
done
shift "$(($OPTIND -1))"

anyopts="-p ${spacing} "
if [[ $verbose = 1 ]]; then anyopts="${anyopts} -v "; fi

echo "number of file sets:" $#

user=$USER

# build the sbatch script
echo "#!/bin/bash" > /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --nodes=1 #request 1 node per" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --tasks-per-node=1 ##we want our node to do 1 task at the same time" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --cpus-per-task=24 ##ask for 24 CPUs per task" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --mem-per-cpu=4gb ## request 4 gigabyte per cpu" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --time=05:00:00 ## ask for max 5 hours on the node" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --output=batchout.txt" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH --open-mode=append" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "#SBATCH " >> /tmp/cycif2ometiff_sbatch_$user.sh

declare -a in_array
declare -a out_array
declare -a opt_array
count=0

# create output locations and build the filename arrays
for arg in "$@"
do
	name=`basename ${arg}`
	echo "Adding directory: ${name} to queue"
	[ ! -d "${arg}/OMETIFF_${name}" ] && mkdir ${arg}/OMETIFF_${name}

        # determine name and location of exposure times and scene position files
        realbase=`echo $name | sed 's/-Scene.*//g'`
        expfilebase="${realbase}_ExposureTimes.csv"
        expfile="${arg}/../../${expfilebase}"
        posfilebase="${realbase}_ScenePositions.csv"
        posfile="${arg}/../../${posfilebase}"
	opt_array[count]=""
	add_quote=0
        if [ -f ${expfile} ]; then
        	echo "     Using exposure times file: ${expfile}"
		opt_array[count]+="\"-e ${expfile} "
		add_quote=1
	fi
        if [ -f ${posfile} ]; then
        	echo "     Using scene positions file: ${posfile}"
		opt_array[count]+="-s ${posfile} "
		add_quote=1
	fi
	# only add another quote sign if needed
	if [[ $add_quote -eq 1 ]]; then
		opt_array[count]+="\""
	fi

	in_array[count]="\"$arg\""
	out_array[count]="\"${arg}/OMETIFF_${name}/${name}\""
	let "count += 1"
done

# declare the in and out arrays and set up srun with an array task list
echo "in_array=(${in_array[*]})" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "out_array=(${out_array[*]})" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "opt_array=(${opt_array[*]})" >> /tmp/cycif2ometiff_sbatch_$user.sh
echo "srun /home/groups/graylab_share/local/miniconda3/envs/ometiff_test/bin/python /home/groups/graylab_share/local/bin/cycif2ometiff.py ${anyopts} \${opt_array[\$SLURM_ARRAY_TASK_ID]} \${in_array[\$SLURM_ARRAY_TASK_ID]} \${out_array[\$SLURM_ARRAY_TASK_ID]}" >> /tmp/cycif2ometiff_sbatch_$user.sh

let "count -= 1"
# now submit it to sbatch
sbatch --array=0-${count} /tmp/cycif2ometiff_sbatch_$user.sh

